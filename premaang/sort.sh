#!/bin/bash

# Script to rename problem folders within operation subfolders by difficulty (Easy, Medium, Hard, then alphabetically)

# Function to get difficulty level for a problem
get_difficulty() {
    local problem="$1"
    # Comprehensive difficulty mapping for all problems
    declare -A difficulties=(
        # Arrays/Traversal_Iteration
        ["Two_Sum"]="Easy"
        ["Best_Time_to_Buy_and_Sell_Stock"]="Easy"
        ["Find_the_Highest_Altitude"]="Easy"
        ["Kids_With_the_Greatest_Number_of_Candies"]="Easy"
        ["Majority_Element"]="Easy"
        ["Number_of_Good_Pairs"]="Easy"
        ["Richest_Customer_Wealth"]="Easy"
        ["Running_Sum_of_1d_Array"]="Easy"
        ["Maximum_Subarray"]="Medium"
        ["Product_of_Array_Except_Self"]="Medium"
        # Arrays/Search
        ["Binary_Search"]="Easy"
        ["Contains_Duplicate"]="Easy"
        ["Intersection_of_Two_Arrays_II"]="Easy"
        ["Missing_Number"]="Easy"
        ["Palindrome_Number"]="Easy"
        ["Single_Number"]="Easy"
        ["How_Many_Numbers_Are_Smaller_Than_the_Current_Number"]="Easy"
        ["Find_the_Duplicate_Number"]="Medium"
        ["Find_Minimum_in_Rotated_Sorted_Array"]="Medium"
        ["Search_in_Rotated_Sorted_Array"]="Medium"
        # Arrays/Insertion_Deletion
        ["Plus_One"]="Easy"
        ["Remove_Duplicates_from_Sorted_Array"]="Easy"
        ["Remove_Element"]="Easy"
        ["Shuffle_the_Array"]="Easy"
        ["Insert_Delete_GetRandom_O1"]="Medium"
        ["Insert_Interval"]="Medium"
        ["Merge_Intervals"]="Medium"
        ["Move_Zeroes"]="Medium"
        ["Remove_Duplicates_from_Sorted_Array_II"]="Medium"
        ["Rotate_Array"]="Medium"
        # Arrays/Sorting_Merging
        ["Merge_Sorted_Array"]="Easy"
        ["Sort_Colors"]="Medium"
        ["Find_K_Pairs_with_Smallest_Sums"]="Medium"
        ["Heap_Sort"]="Medium"
        ["K_Closest_Points_to_Origin"]="Medium"
        ["Kth_Smallest_Element_in_a_Sorted_Matrix"]="Medium"
        ["Largest_Number"]="Medium"
        ["Sort_an_Array"]="Medium"
        ["Sort_Characters_By_Frequency"]="Medium"
        ["Merge_k_Sorted_Lists"]="Hard"
        # Arrays/Subarray_Operations
        ["Contiguous_Array"]="Medium"
        ["Find_All_Anagrams_in_a_String"]="Medium"
        ["Longest_Consecutive_Sequence"]="Medium"
        ["Longest_Substring_Without_Repeating_Characters"]="Medium"
        ["Maximum_Product_Subarray"]="Medium"
        ["Subarray_Product_Less_Than_K"]="Medium"
        ["Subarray_Sum_Equals_K"]="Medium"
        ["Maximum_Sum_Circular_Subarray"]="Medium"
        ["Minimum_Window_Substring"]="Hard"
        ["Sliding_Window_Maximum"]="Hard"
        # Strings/Traversal_Concatenation
        ["Defanging_an_IP_Address"]="Easy"
        ["Goal_Parser_Interpretation"]="Easy"
        ["Jewels_and_Stones"]="Easy"
        ["Longest_Common_Prefix"]="Easy"
        ["Merge_Strings_Alternately"]="Easy"
        ["Reverse_String"]="Easy"
        ["Reverse_Vowels_of_a_String"]="Easy"
        ["Shuffle_String"]="Easy"
        ["Make_The_String_Great"]="Easy"
        ["Score_of_Parentheses"]="Medium"
        # Strings/Search_Substring
        ["Implement_strStr"]="Easy"
        ["First_Unique_Character_in_a_String"]="Easy"
        ["Split_a_String_in_Balanced_Strings"]="Easy"
        ["Valid_Anagram"]="Easy"
        ["Find_All_Anagrams_in_a_String"]="Medium"
        ["Group_Anagrams"]="Medium"
        ["Longest_Palindromic_Substring"]="Medium"
        ["String_to_Integer_atoi"]="Medium"
        ["Minimum_Window_Substring"]="Hard"
        ["Longest_Substring_Without_Repeating_Characters"]="Medium"
        # Strings/Replacement_Modification
        ["Remove_All_Adjacent_Duplicates_In_String"]="Easy"
        ["Valid_Parentheses"]="Easy"
        ["Basic_Calculator_II"]="Medium"
        ["Decode_String"]="Medium"
        ["Generate_Parentheses"]="Medium"
        ["Replace_Words"]="Medium"
        ["Reverse_Words_in_a_String"]="Medium"
        ["Simplify_Path"]="Medium"
        ["Remove_All_Adjacent_Duplicates_in_String_II"]="Medium"
        ["Longest_Palindromic_Subsequence"]="Medium"
        # Strings/Sorting_Counting
        ["Sort_the_People"]="Easy"
        ["Sort_Array_By_Parity"]="Easy"
        ["Count_Sorted_Vowel_Strings"]="Medium"
        ["Custom_Sort_String"]="Medium"
        ["Frequency_of_the_Most_Frequent_Element"]="Medium"
        ["Longest_String_Chain"]="Medium"
        ["Sort_Characters_By_Frequency"]="Medium"
        ["Sort_the_Matrix_Diagonally"]="Medium"
        ["Top_K_Frequent_Words"]="Medium"
        ["Reorganize_String"]="Medium"
        # Strings/Palindrome_Anagram_Checks
        ["Valid_Palindrome"]="Easy"
        ["Palindrome_Number"]="Easy"
        ["Valid_Anagram"]="Easy"
        ["Break_a_Palindrome"]="Medium"
        ["Find_All_Anagrams_in_a_String"]="Medium"
        ["Group_Anagrams"]="Medium"
        ["Longest_Palindromic_Substring"]="Medium"
        ["Palindromic_Substrings"]="Medium"
        ["Palindrome_Linked_List"]="Medium"
        ["Palindrome_Pairs"]="Hard"
        # Hash_Map/Insertion
        ["Design_HashMap"]="Easy"
        ["Insert_into_a_Sorted_Circular_Linked_List"]="Medium"
        ["Design_Underground_System"]="Medium"
        ["Design_Twitter"]="Medium"
        ["Insert_Delete_GetRandom_O1"]="Medium"
        ["LRU_Cache"]="Medium"
        ["All_Oone_Inc_Dec_GetMaxKey_GetMinKey"]="Hard"
        ["Design_In_Memory_File_System"]="Hard"
        ["Design_Skiplist"]="Hard"
        ["LFU_Cache"]="Hard"
        # Hash_Map/Lookup_Search
        ["Two_Sum"]="Easy"
        ["Contains_Duplicate"]="Easy"
        ["First_Unique_Character_in_a_String"]="Easy"
        ["Happy_Number"]="Easy"
        ["Intersection_of_Two_Arrays"]="Easy"
        ["Isomorphic_Strings"]="Easy"
        ["Word_Pattern"]="Easy"
        ["Find_the_Difference"]="Easy"
        ["Unique_Occurrences"]="Easy"
        ["Valid_Sudoku"]="Medium"
        # Hash_Map/Deletion
        ["Design_HashSet"]="Easy"
        ["Remove_Duplicates_from_Sorted_List"]="Easy"
        ["Delete_Node_in_a_Linked_List"]="Easy"
        ["Remove_All_Adjacent_Duplicates_in_String"]="Easy"
        ["Delete_Characters_to_Make_Fancy_String"]="Easy"
        ["Delete_Nodes_From_Linked_List_Present_in_Array"]="Medium"
        ["Delete_Operation_for_Two_Strings"]="Medium"
        ["Delete_the_Middle_Node_of_a_Linked_List"]="Medium"
        ["Delete_and_Earn"]="Medium"
        ["Delete_Leaves_With_a_Given_Value"]="Medium"
        # Hash_Map/Iteration_Counting
        ["Jewels_and_Stones"]="Easy"
        ["Majority_Element"]="Easy"
        ["Ransom_Note"]="Easy"
        ["Unique_Number_of_Occurrences"]="Easy"
        ["Valid_Anagram"]="Easy"
        ["Determine_if_Two_Strings_Are_Close"]="Medium"
        ["Group_Anagrams"]="Medium"
        ["Sort_Characters_By_Frequency"]="Medium"
        ["Task_Scheduler"]="Medium"
        ["Top_K_Frequent_Elements"]="Medium"
        # Hash_Map/Grouping_Mapping
        ["Sort_the_People"]="Easy"
        ["Subdomain_Visit_Count"]="Easy"
        ["Accounts_Merge"]="Medium"
        ["Brick_Wall"]="Medium"
        ["Find_Duplicate_File_in_System"]="Medium"
        ["Find_Players_With_Zero_or_One_Losses"]="Medium"
        ["Group_Anagrams"]="Medium"
        ["Group_Shifted_Strings"]="Medium"
        ["Group_Sold_Products_By_The_Date"]="Medium"
        ["Group_the_People_Given_the_Group_Size_They_Belong_To"]="Medium"
        # Sets/Insertion
        ["Design_HashSet"]="Easy"
        ["Logger_Rate_Limiter"]="Easy"
        ["My_HashSet"]="Easy"
        ["Set_Mismatch"]="Easy"
        ["Add_and_Search_Word"]="Medium"
        ["Add_Bold_Tag_in_String"]="Medium"
        ["Design_a_Set_for_Tweets"]="Medium"
        ["Design_Phone_Directory"]="Medium"
        ["Insert_Delete_GetRandom_O1"]="Medium"
        ["Insert_into_a_Sorted_Circular_Linked_List"]="Medium"
        # Sets/Lookup_Membership
        ["Contains_Duplicate"]="Easy"
        ["Happy_Number"]="Easy"
        ["Jewels_and_Stones"]="Easy"
        ["Single_Number"]="Easy"
        ["Check_if_N_and_Its_Double_Exist"]="Easy"
        ["Contains_Duplicate_II"]="Easy"
        ["Longest_Consecutive_Sequence"]="Medium"
        ["Valid_Sudoku"]="Medium"
        ["Word_Break"]="Medium"
        ["Check_If_a_String_Contains_All_Binary_Codes_of_Size_K"]="Medium"
        # Sets/Deletion
        ["Delete_Characters_to_Make_Fancy_String"]="Easy"
        ["Delete_Columns_to_Make_Sorted"]="Easy"
        ["Delete_Greatest_Value_in_Each_Row"]="Easy"
        ["Delete_and_Earn"]="Medium"
        ["Delete_Leaves_With_a_Given_Value"]="Medium"
        ["Delete_Operation_for_Two_Strings"]="Medium"
        ["Remove_All_Adjacent_Duplicates_in_String_II"]="Medium"
        ["Delete_Duplicate_Folders_in_System"]="Medium"
        ["Remove_Duplicate_Letters"]="Hard"
        ["Remove_Invalid_Parentheses"]="Hard"
        # Sets/Union_Intersection_Difference
        ["Find_the_Difference"]="Easy"
        ["Intersection_of_Two_Arrays"]="Easy"
        ["Intersection_of_Two_Arrays_II"]="Easy"
        ["Set_Mismatch"]="Easy"
        ["Union_of_Two_Arrays"]="Easy"
        ["Unique_Email_Addresses"]="Easy"
        ["Find_Common_Characters"]="Easy"
        ["Intersection_of_Multiple_Arrays"]="Easy"
        ["Find_the_Difference_of_Two_Arrays"]="Easy"
        ["Set_Intersection_Size_At_Least_Two"]="Hard"
        # Sets/Iteration_Counting_Uniques
        ["First_Unique_Character_in_a_String"]="Easy"
        ["Single_Number"]="Easy"
        ["Unique_Number_of_Occurrences"]="Easy"
        ["Longest_Consecutive_Sequence"]="Medium"
        ["Single_Number_II"]="Medium"
        ["Unique_Binary_Search_Trees"]="Medium"
        ["Unique_Paths"]="Medium"
        ["Number_of_Unique_Flavors_After_Sharing"]="Medium"
        ["Unique_Length_3_Palindromic_Subsequences"]="Medium"
        ["Number_of_Unique_Good_Subsequences"]="Hard"
        # Tuples/Creation_Access
        ["Python_Tuples_HackerRank"]="Easy"
        ["Accounts_Merge"]="Medium"
        ["Combination_Sum"]="Medium"
        ["Expressive_Words"]="Medium"
        ["Find_K_Pairs_with_Smallest_Sums"]="Medium"
        ["Find_Original_Array_From_Doubled_Array"]="Medium"
        ["K_Closest_Points_to_Origin"]="Medium"
        ["Kth_Smallest_Element_in_a_Sorted_Matrix"]="Medium"
        ["Majority_Element_II"]="Medium"
        ["Tuple_with_Same_Product"]="Medium"
        # Tuples/Iteration
        ["Tuple_unpacking_in_Python"]="Easy"
        ["3Sum"]="Medium"
        ["4Sum"]="Medium"
        ["Equal_Row_and_Column_Pairs"]="Medium"
        ["K_Sum_Pairs"]="Medium"
        ["Number_of_Arithmetic_Triplets"]="Medium"
        ["Number_of_Pairs_of_Interchangeable_Rectangles"]="Medium"
        ["Tuple_with_Same_Product"]="Medium"
        ["Number_of_Good_Paths"]="Hard"
        ["Palindrome_Pairs"]="Hard"
        # Tuples/Packing_Unpacking
        ["Python_Tuples_HackerRank"]="Easy"
        ["Return_multiple_values_from_function"]="Easy"
        ["Tuple_unpacking_in_loops"]="Easy"
        ["Zip_function_with_tuples"]="Easy"
        ["Combination_Sum"]="Medium"
        ["Namedtuple_in_collections"]="Medium"
        ["Return_tuple_in_functions"]="Easy"
        ["Tuple_in_heap"]="Medium"
        ["Unpacking_in_DFS_BFS"]="Medium"
        ["Use_tuples_in_sorted"]="Medium"
        # Tuples/Comparison_Sorting
        ["Sort_Array_by_Increasing_Frequency"]="Easy"
        ["Custom_Sort_String"]="Medium"
        ["K_Closest_Points_to_Origin"]="Medium"
        ["Largest_Number"]="Medium"
        ["Sort_Characters_By_Frequency"]="Medium"
        ["Sort_List_of_Tuples"]="Medium"
        ["Sort_the_Matrix_Diagonally"]="Medium"
        ["Top_K_Frequent_Elements"]="Medium"
        ["Reorganize_String"]="Medium"
        ["Sort_Items_by_Groups_Respecting_Dependencies"]="Hard"
        # Tuples/Use_as_Keys
        ["Group_Anagrams"]="Medium"
        ["Number_of_Boomerangs"]="Medium"
        ["Number_of_Pairs_of_Interchangeable_Rectangles"]="Medium"
        ["Equal_Row_and_Column_Pairs"]="Medium"
        ["Group_Shifted_Strings"]="Medium"
        ["Tuple_unpacking_and_keys_in_dict"]="Medium"
        ["Tuple_with_Same_Product"]="Medium"
        ["Delete_Duplicate_Folders_in_System"]="Medium"
        ["Find_Duplicate_Subtrees"]="Medium"
        ["Max_Points_on_a_Line"]="Hard"
        # Linked_Lists/Traversal
        ["Intersection_of_Two_Linked_Lists"]="Easy"
        ["Linked_List_Cycle"]="Easy"
        ["Middle_of_the_Linked_List"]="Easy"
        ["Design_Linked_List"]="Medium"
        ["Find_the_Minimum_and_Maximum_Number_of_Nodes_Between_Critical_Points"]="Medium"
        ["Linked_List_Random_Node"]="Medium"
        ["Maximum_Twin_Sum_of_a_Linked_List"]="Medium"
        ["Odd_Even_Linked_List"]="Medium"
        ["Palindrome_Linked_List"]="Medium"
        ["Swapping_Nodes_in_a_Linked_List"]="Medium"
        # Linked_Lists/Insertion
        ["Merge_Two_Sorted_Lists"]="Easy"
        ["Add_Two_Numbers"]="Medium"
        ["Insert_Greatest_Common_Divisors_in_Linked_List"]="Medium"
        ["Insert_into_a_Sorted_Circular_Linked_List"]="Medium"
        ["Partition_List"]="Medium"
        ["Reorder_List"]="Medium"
        ["Rotate_List"]="Medium"
        ["Sort_List"]="Medium"
        ["Swap_Nodes_in_Pairs"]="Medium"
        ["Merge_K_Sorted_Lists"]="Hard"
        # Linked_Lists/Deletion
        ["Remove_Linked_List_Elements"]="Easy"
        ["Delete_N_Nodes_After_M_Nodes_of_a_Linked_List"]="Easy"
        ["Delete_Node_in_a_Linked_List"]="Easy"
        ["Remove_Duplicates_from_Sorted_List"]="Easy"
        ["Delete_Nodes_From_Linked_List_Present_in_Array"]="Medium"
        ["Delete_the_Middle_Node_of_a_Linked_List"]="Medium"
        ["Remove_Duplicates_from_Sorted_List_II"]="Medium"
        ["Remove_Nth_Node_From_End_of_List"]="Medium"
        ["Remove_Nodes_From_Linked_List"]="Medium"
        ["Remove_Zero_Sum_Consecutive_Nodes_from_Linked_List"]="Medium"
        # Linked_Lists/Reversal
        ["Reverse_Linked_List"]="Easy"
        ["Odd_Even_Linked_List"]="Medium"
        ["Palindrome_Linked_List"]="Medium"
        ["Reorder_List"]="Medium"
        ["Reverse_Even_Length_Groups"]="Medium"
        ["Reverse_Linked_List_II"]="Medium"
        ["Rotate_List"]="Medium"
        ["Swap_Nodes_in_Pairs"]="Medium"
        ["Swapping_Nodes_in_a_Linked_List"]="Medium"
        ["Reverse_Nodes_in_k_Group"]="Hard"
        # Linked_Lists/Merging
        ["Merge_Two_Sorted_Lists"]="Easy"
        ["Add_Two_Numbers"]="Medium"
        ["Add_Two_Numbers_II"]="Medium"
        ["Intersection_of_Two_Linked_Lists"]="Easy"
        ["Partition_List"]="Medium"
        ["Reorder_List"]="Medium"
        ["Sort_List"]="Medium"
        ["Find_the_Duplicate_Number"]="Medium"
        ["Flatten_a_Multilevel_Doubly_Linked_List"]="Medium"
        ["Merge_K_Sorted_Lists"]="Hard"
        # Stacks/Push
        ["Backspace_String_Compare"]="Easy"
        ["Online_Stock_Span"]="Easy"
        ["Remove_All_Adjacent_Duplicates_In_String"]="Easy"
        ["Asteroid_Collision"]="Medium"
        ["Car_Fleet"]="Medium"
        ["Daily_Temperatures"]="Medium"
        ["Evaluate_Reverse_Polish_Notation"]="Medium"
        ["Min_Stack"]="Medium"
        ["Simplify_Path"]="Medium"
        ["Basic_Calculator"]="Hard"
        # Stacks/Pop
        ["Remove_Outermost_Parentheses"]="Easy"
        ["Valid_Parentheses"]="Easy"
        ["Decode_String"]="Medium"
        ["Make_The_String_Great"]="Medium"
        ["Next_Greater_Element_I"]="Easy"
        ["Next_Greater_Element_II"]="Medium"
        ["Largest_Rectangle_in_Histogram"]="Hard"
        ["Maximal_Rectangle"]="Hard"
        ["Remove_Duplicate_Letters"]="Hard"
        ["Trapping_Rain_Water"]="Hard"
        # Stacks/Peek_Top
        ["Min_Stack"]="Medium"
        ["Basic_Calculator_II"]="Medium"
        ["Exclusive_Time_of_Functions"]="Medium"
        ["Implement_Queue_using_Stacks"]="Medium"
        ["Next_Greater_Element_III"]="Medium"
        ["Remove_K_Digits"]="Medium"
        ["Score_of_Parentheses"]="Medium"
        ["Stock_Spanner"]="Medium"
        ["Sum_of_Subarray_Minimums"]="Medium"
        ["Validate_Stack_Sequences"]="Medium"
        # Stacks/IsEmpty
        ["Backspace_String_Compare"]="Easy"
        ["Make_The_String_Great"]="Easy"
        ["Valid_Parentheses"]="Easy"
        ["Daily_Temperatures"]="Medium"
        ["Decode_String"]="Medium"
        ["Next_Greater_Element_II"]="Medium"
        ["Simplify_Path"]="Medium"
        ["Validate_Stack_Sequences"]="Medium"
        ["Basic_Calculator"]="Hard"
        ["Remove_Invalid_Parentheses"]="Hard"
        # Stacks/Monotonic_Stack
        ["Next_Greater_Element_I"]="Easy"
        ["Asteroid_Collision"]="Medium"
        ["Car_Fleet"]="Medium"
        ["Daily_Temperatures"]="Medium"
        ["Next_Greater_Element_II"]="Medium"
        ["Online_Stock_Span"]="Easy"
        ["Sum_of_Subarray_Minimums"]="Medium"
        ["Largest_Rectangle_in_Histogram"]="Hard"
        ["Maximal_Rectangle"]="Hard"
        ["Trapping_Rain_Water"]="Hard"
        # Queues/Enqueue
        ["Number_of_Recent_Calls"]="Easy"
        ["Number_of_Students_Unable_to_Eat_Lunch"]="Easy"
        ["Moving_Average_from_Data_Stream"]="Easy"
        ["Design_Circular_Queue"]="Medium"
        ["Design_Front_Middle_Back_Queue"]="Medium"
        ["Implement_Queue_using_Stacks"]="Medium"
        ["Kth_Largest_Element_in_a_Stream"]="Medium"
        ["Queue_Reconstruction_by_Height"]="Medium"
        ["Reveal_Cards_In_Increasing_Order"]="Medium"
        ["Task_Scheduler"]="Medium"
        # Queues/Dequeue
        ["Number_of_Recent_Calls"]="Easy"
        ["Moving_Average_from_Data_Stream"]="Easy"
        ["Dota2_Senate"]="Medium"
        ["Find_the_Shortest_Path_with_Alternating_Colors"]="Medium"
        ["Implement_Stack_using_Queues"]="Medium"
        ["Jump_Game_VI"]="Medium"
        ["Number_of_Visible_People_in_a_Queue"]="Medium"
        ["Open_the_Lock"]="Medium"
        ["Sliding_Window_Maximum"]="Hard"
        ["Shortest_Path_in_a_Grid_with_Obstacles_Elimination"]="Hard"
        # Queues/Peek_Front
        ["Number_of_Students_Unable_to_Eat_Lunch"]="Easy"
        ["Time_Needed_to_Buy_Tickets"]="Easy"
        ["Design_Front_Middle_Back_Queue"]="Medium"
        ["Dota2_Senate"]="Medium"
        ["Implement_Queue_using_Stacks"]="Medium"
        ["Implement_Stack_using_Queues"]="Medium"
        ["Jump_Game_VI"]="Medium"
        ["Kth_Largest_Element_in_a_Stream"]="Medium"
        ["Reveal_Cards_In_Increasing_Order"]="Medium"
        ["Sliding_Window_Maximum"]="Hard"
        # Queues/IsEmpty
        ["Number_of_Students_Unable_to_Eat_Lunch"]="Easy"
        ["Design_Circular_Queue"]="Medium"
        ["Dota2_Senate"]="Medium"
        ["Implement_Stack_using_Queues"]="Medium"
        ["Number_of_Islands"]="Medium"
        ["Open_the_Lock"]="Medium"
        ["Pacific_Atlantic_Water_Flow"]="Medium"
        ["Rotten_Oranges"]="Medium"
        ["Shortest_Path_in_Binary_Matrix"]="Medium"
        ["Walls_and_Gates"]="Medium"
        # Queues/Monotonic_Queue
        ["Find_the_Most_Competitive_Subsequence"]="Medium"
        ["Jump_Game_VI"]="Medium"
        ["Longest_Continuous_Subarray_With_Absolute_Diff_Less_Than_or_Equal_to_Limit"]="Medium"
        ["Number_of_Visible_People_in_a_Queue"]="Medium"
        ["Sliding_Subarray_Beauty"]="Medium"
        ["Constrained_Subsequence_Sum"]="Hard"
        ["Maximum_Number_of_Tasks_You_Can_Assign"]="Hard"
        ["Shortest_Subarray_with_Sum_at_Least_K"]="Hard"
        ["Sliding_Window_Maximum"]="Hard"
        ["Sliding_Window_Median"]="Hard"
        # Trees/Traversal
        ["Average_of_Levels_in_Binary_Tree"]="Easy"
        ["Binary_Tree_Inorder_Traversal"]="Easy"
        ["Binary_Tree_Preorder_Traversal"]="Easy"
        ["Binary_Tree_Postorder_Traversal"]="Easy"
        ["Path_Sum"]="Easy"
        ["Binary_Tree_Level_Order_Traversal"]="Medium"
        ["Binary_Tree_Right_Side_View"]="Medium"
        ["Binary_Tree_Zigzag_Level_Order_Traversal"]="Medium"
        ["Binary_Tree_Maximum_Path_Sum"]="Hard"
        ["Vertical_Order_Traversal_of_a_Binary_Tree"]="Hard"
        # Trees/Insertion
        ["Convert_Sorted_Array_to_Binary_Search_Tree"]="Medium"
        ["Convert_Sorted_List_to_Binary_Search_Tree"]="Medium"
        ["Insert_into_a_Binary_Search_Tree"]="Medium"
        ["Add_One_Row_to_Tree"]="Medium"
        ["All_Possible_Full_Binary_Trees"]="Medium"
        ["Construct_Binary_Search_Tree_from_Preorder_Traversal"]="Medium"
        ["Construct_Binary_Tree_from_Inorder_and_Postorder_Traversal"]="Medium"
        ["Construct_Binary_Tree_from_Preorder_and_Inorder_Traversal"]="Medium"
        ["Unique_Binary_Search_Trees"]="Medium"
        ["Unique_Binary_Search_Trees_II"]="Medium"
        # Trees/Deletion
        ["Binary_Tree_Pruning"]="Medium"
        ["Count_Nodes_Equal_to_Average_of_Subtree"]="Medium"
        ["Delete_Duplicate_Folders_in_System"]="Medium"
        ["Delete_Leaves_With_a_Given_Value"]="Medium"
        ["Delete_Node_in_a_BST"]="Medium"
        ["Delete_Nodes_and_Return_Forest"]="Medium"
        ["Find_Duplicate_Subtrees"]="Medium"
        ["Remove_Leaf_Nodes_with_Specific_Value"]="Medium"
        ["Remove_Sub_Folders_from_the_Filesystem"]="Medium"
        ["Delete_Node_in_a_Linked_List"]="Easy"
        ["Insufficient_Nodes_in_Root_to_Leaf_Paths"]="Medium"
        ["Maximum_Binary_Tree_II"]="Medium"
        ["Prune_Tree"]="Medium"
        # Trees/Search
        ["Search_in_a_Binary_Search_Tree"]="Easy"
        ["Closest_Binary_Search_Tree_Value"]="Easy"
        ["Find_Mode_in_Binary_Search_Tree"]="Easy"
        ["Two_Sum_IV_Input_is_a_BST"]="Easy"
        ["Binary_Search_Tree_Iterator"]="Medium"
        ["Find_a_Corresponding_Node_of_a_Binary_Tree_in_a_Clone_of_That_Tree"]="Medium"
        ["Find_Closest_Value_in_BST"]="Easy"
        ["Inorder_Successor_in_BST"]="Medium"
        ["Kth_Smallest_Element_in_a_BST"]="Medium"
        ["Lowest_Common_Ancestor_of_a_Binary_Search_Tree"]="Medium"
        ["Lowest_Common_Ancestor_of_a_Binary_Tree"]="Medium"
        ["Recover_Binary_Search_Tree"]="Medium"
        ["Validate_Binary_Search_Tree"]="Medium"
        # Trees/Height_Diameter_Balance
        ["Balanced_Binary_Tree"]="Easy"
        ["Diameter_of_Binary_Tree"]="Easy"
        ["Maximum_Depth_of_Binary_Tree"]="Easy"
        ["Minimum_Depth_of_Binary_Tree"]="Easy"
        ["Same_Tree"]="Easy"
        ["Symmetric_Tree"]="Easy"
        ["Check_Completeness_of_a_Binary_Tree"]="Medium"
        ["Count_Complete_Tree_Nodes"]="Medium"
        ["Count_Nodes_Equal_to_Average_of_Subtree"]="Medium"
        ["Even_Odd_Tree"]="Medium"
        ["Height_of_Binary_Tree_After_Subtree_Removal_Queries"]="Medium"
        ["Maximum_Level_Sum_of_a_Binary_Tree"]="Medium"
        ["Minimum_Height_Trees"]="Medium"
        ["Sum_of_Distances_in_Tree"]="Hard"
        ["Binary_Tree_Maximum_Path_Sum"]="Hard"
        # Graphs/Traversal_BFS_DFS
        ["Clone_Graph"]="Medium"
        ["Course_Schedule"]="Medium"
        ["Find_Closest_Node_to_Given_Two_Nodes"]="Medium"
        ["Number_of_Islands"]="Medium"
        ["Pacific_Atlantic_Water_Flow"]="Medium"
        ["Rotten_Oranges"]="Medium"
        ["Shortest_Path_in_Binary_Matrix"]="Medium"
        ["Snakes_and_Ladders"]="Medium"
        ["Walls_and_Gates"]="Medium"
        ["Word_Ladder"]="Hard"
        # Graphs/Insertion
        ["Find_Center_of_Star_Graph"]="Easy"
        ["Find_if_Path_Exists_in_Graph"]="Easy"
        ["Number_of_Provinces"]="Medium"
        ["Accounts_Merge"]="Medium"
        ["Add_Edge_to_Tree"]="Medium"
        ["Evaluate_Division"]="Medium"
        ["Graph_Connectivity_With_Threshold"]="Medium"
        ["Insert_into_a_Sorted_Circular_Linked_List"]="Medium"
        ["Minimum_Height_Trees"]="Medium"
        ["Minimum_Score_of_a_Path_Between_Two_Cities"]="Medium"
        ["Sentence_Similarity_II"]="Medium"
        ["The_Maze"]="Medium"
        ["Add_Edge_to_Make_Strongly_Connected"]="Hard"
        ["Add_Edges_to_Make_Degrees_of_All_Nodes_Even"]="Hard"
        ["Add_Edge_to_Graph"]="Hard"
        ["Build_a_Matrix_With_Conditions"]="Hard"
        # Graphs/Deletion
        ["Make_Connected"]="Medium"
        ["Minimum_Number_of_Vertices_to_Reach_All_Nodes"]="Medium"
        ["Redundant_Connection"]="Medium"
        ["Delete_Duplicate_Folders_in_System"]="Medium"
        ["Delete_Nodes_and_Return_Forest"]="Medium"
        ["Find_Duplicate_Subtrees"]="Medium"
        ["Find_the_City_With_the_Smallest_Number_of_Neighbors_at_a_Threshold_Distance"]="Medium"
        ["Number_of_Good_Paths"]="Hard"
        ["Redundant_Connection_II"]="Hard"
        ["Remove_Critical_Edges"]="Hard"
        ["Remove_Edges_to_Avoid_Cycles"]="Medium"
        ["Remove_Edges_to_Restrict_Path"]="Hard"
        ["Remove_Edge_to_Make_Tree"]="Medium"
        ["Remove_Edge_to_Minimize_Diameter"]="Hard"
        ["Remove_Max_Number_of_Edges_to_Keep_Graph_Fully_Traversable"]="Hard"
        ["Remove_Nodes_From_Linked_List"]="Medium"
        ["Critical_Connections_in_a_Network"]="Hard"
        ["Delete_Edges_to_Make_Directed_Acyclic_Graph"]="Hard"
        # Graphs/Shortest_Path
        ["Minimum_Path_Sum"]="Medium"
        ["Network_Delay_Time"]="Medium"
        ["Open_the_Lock"]="Medium"
        ["Path_With_Minimum_Effort"]="Medium"
        ["Shortest_Path_in_Binary_Matrix"]="Medium"
        ["Cheapest_Flights_Within_K_Stops"]="Medium"
        ["Find_the_City_With_the_Smallest_Number_of_Neighbors_at_a_Threshold_Distance"]="Medium"
        ["Find_the_Shortest_Path_with_Alternating_Colors"]="Medium"
        ["Shortest_Bridge"]="Medium"
        ["Shortest_Path_with_Alternating_Colors"]="Medium"
        ["Shortest_Path_in_a_Grid_with_Obstacles_Elimination"]="Hard"
        ["Find_the_Shortest_Superstring"]="Hard"
        ["Shortest_Path_to_Get_All_Keys"]="Hard"
        ["Word_Ladder"]="Hard"
        # Graphs/Cycle_Detection
        ["Course_Schedule"]="Medium"
        ["Course_Schedule_II"]="Medium"
        ["Find_Eventual_Safe_States"]="Medium"
        ["Graph_Valid_Tree"]="Medium"
        ["Is_Graph_Bipartite"]="Medium"
        ["Possible_Bipartition"]="Medium"
        ["Redundant_Connection"]="Medium"
        ["All_Paths_From_Source_Lead_to_Destination"]="Medium"
        ["Cycle_Detection_in_Undirected_Graph"]="Medium"
        ["Longest_Cycle_in_a_Graph"]="Hard"
        # Heaps/Heapify
        ["Kth_Largest_Element_in_an_Array"]="Medium"
        ["Sort_an_Array"]="Medium"
        ["Convert_Max_Heap_to_Min_Heap"]="Medium"
        ["Heap_Sort_for_Decreasing_Order"]="Medium"
        ["K_Smallest_Elements"]="Medium"
        ["K_Sorted_Array"]="Medium"
        ["Kth_Smallest_Element"]="Medium"
        ["Reorganize_String"]="Medium"
        ["Task_Scheduler"]="Medium"
        ["Top_K_Frequent_Elements"]="Medium"
        # Heaps/Push_Insert
        ["Last_Stone_Weight"]="Easy"
        ["Kth_Largest_Element_in_a_Stream"]="Medium"
        ["K_Closest_Points_to_Origin"]="Medium"
        ["Seat_Reservation_Manager"]="Medium"
        ["Top_K_Frequent_Words"]="Medium"
        ["Ugly_Number_II"]="Medium"
        ["Find_Median_from_Data_Stream"]="Hard"
        ["Furthest_Building_You_Can_Reach"]="Medium"
        ["Maximum_Number_of_Tasks_You_Can_Assign"]="Hard"
        ["Merge_K_Sorted_Lists"]="Hard"
        # Heaps/Pop_Extract
        ["Last_Stone_Weight"]="Easy"
        ["Find_K_Pairs_with_Smallest_Sums"]="Medium"
        ["K_Closest_Points_to_Origin"]="Medium"
        ["Kth_Largest_Element_in_an_Array"]="Medium"
        ["Reorganize_String"]="Medium"
        ["Task_Scheduler"]="Medium"
        ["Top_K_Frequent_Elements"]="Medium"
        ["Find_Median_from_Data_Stream"]="Hard"
        ["Furthest_Building_You_Can_Reach"]="Medium"
        ["Merge_K_Sorted_Lists"]="Hard"
        # Heaps/Peek
        ["Kth_Largest_Element_in_a_Stream"]="Medium"
        ["Last_Stone_Weight"]="Easy"
        ["Process_Tasks_Using_Servers"]="Medium"
        ["Reorganize_String"]="Medium"
        ["Seat_Reservation_Manager"]="Medium"
        ["Task_Scheduler"]="Medium"
        ["Find_Median_from_Data_Stream"]="Hard"
        ["Maximum_Invitations"]="Hard"
        ["Maximum_Number_of_Tasks_You_Can_Assign"]="Hard"
        ["Sliding_Window_Maximum"]="Hard"
        # Heaps/Merge
        ["Merge_Similar_Items"]="Easy"
        ["Smallest_Number_in_Infinite_Set"]="Medium"
        ["Find_K_Pairs_with_Smallest_Sums"]="Medium"
        ["Find_the_Kth_Largest_Integer_in_the_Array"]="Medium"
        ["K_Smallest_Pairs"]="Medium"
        ["Merge_Nodes_in_Between_Zeros"]="Medium"
        ["Task_Scheduler_II"]="Medium"
        ["Design_Graph_With_Shortest_Path_Calculator"]="Medium"
        ["Network_Delay_Time"]="Medium"
        ["Merge_K_Sorted_Lists"]="Hard"
    )
    if [[ -n "${difficulties[$problem]}" ]]; then
        echo "${difficulties[$problem]}"
    else
        echo "Medium"  # Default to Medium if not specified
    fi
}

# Function to convert difficulty to numeric value for sorting
difficulty_to_num() {
    local difficulty="$1"
    case "$difficulty" in
        "Easy") echo 1 ;;
        "Medium") echo 2 ;;
        "Hard") echo 3 ;;
        *) echo 2 ;;  # Default to Medium
    esac
}

# Step 1: Process problem folders in each operation subfolder
main_folders=$(find . -maxdepth 1 -type d -name '[0-9][0-9]*_*' | sort -V | cut -c 3-)
for main_folder in $main_folders; do
    if [[ -d "$main_folder" ]]; then
        echo "Processing main folder: $main_folder"
        # Find operation subfolders (e.g., 01_Insertion_Deletion)
        operation_folders=$(find "$main_folder" -maxdepth 1 -type d -name '[0-9][0-9]*_*' | sort -V)
        for op_folder in $operation_folders; do
            echo "Processing operation folder: $op_folder"
            # Collect problem folders with their difficulties
            declare -A problem_difficulties
            problems=()
            for problem_dir in "$op_folder"/*/ ; do
                if [[ -d "$problem_dir" ]]; then
                    problem_name=$(basename "$problem_dir")
                    # Strip any existing numeric prefix (e.g., 01_Clone_Graph -> Clone_Graph)
                    clean_problem_name=$(echo "$problem_name" | sed 's/^[0-9]\{2\}_//')
                    difficulty=$(get_difficulty "$clean_problem_name")
                    problem_difficulties["$problem_name"]="$difficulty"
                    problems+=("$problem_name")
                fi
            done

            # Debug: List problems found
            echo "Found problems in $op_folder: ${problems[*]}"

            # Sort problems by difficulty (Easy < Medium < Hard) and then alphabetically
            sorted_problems=()
            while IFS= read -r problem; do
                sorted_problems+=("$problem")
            done < <(for problem in "${problems[@]}"; do
                clean_problem_name=$(echo "$problem" | sed 's/^[0-9]\{2\}_//')
                difficulty_num=$(difficulty_to_num "${problem_difficulties[$problem]}")
                echo "$difficulty_num $clean_problem_name $problem"
            done | sort -k1,1n -k2,2 | cut -d' ' -f3-)

            # Debug: List sorted problems
            echo "Sorted problems: ${sorted_problems[*]}"

            # Rename problem folders with numbered prefixes
            index=1
            for problem in "${sorted_problems[@]}"; do
                old_path="$op_folder/$problem"
                # Strip any existing prefix for the new name
                clean_problem_name=$(echo "$problem" | sed 's/^[0-9]\{2\}_//')
                new_name=$(printf "%02d_%s" "$index" "$clean_problem_name")
                new_path="$op_folder/$new_name"
                if [[ "$old_path" != "$new_path" && -d "$old_path" ]]; then
                    mv "$old_path" "$new_path"
                    echo "Renamed problem folder $old_path to $new_path"
                else
                    echo "No rename needed for $old_path (already correct or does not exist)"
                fi
                ((index++))
            done
        done
    else
        echo "Warning: Main folder $main_folder does not exist"
    fi
done

echo "Problem folders numbered by difficulty in all operation subfolders."
